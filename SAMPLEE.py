# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KmLztuHYWUHhWqfQAmKhYz7GCSNnMOMH
"""

import streamlit as st
import requests
import h5py
import tensorflow as tf
from io import BytesIO
from PIL import Image
import cv2
from PIL import Image,ImageOps
import numpy as np

# Streamlit app
st.title("Image Classifier")

uploaded_file = st.file_uploader("Choose an image...", type="png")

if uploaded_file is not None:
    # Load the image
    img = Image.open(uploaded_file).convert('L')
    img = img.resize((28, 28))
    img_array = np.array(img)
    img_array = img_array / 255.0
    img_array = img_array.reshape(1, 28, 28, 1)

    # Display the image
    st.image(img, caption='Uploaded Image', use_column_width=True)
    st.write("")
    st.write("Classifying...")

    # Predict the class
    prediction = loaded_model.predict(img_array)
    st.write(f"Predicted Class: {np.argmax(prediction)}")

class_mapping = {
    0: 'puppy',
    1: 'airplane',
    2: 'Dinosaur',
    3: 'flag',
}

@st.cache(allow_output_mutation=True)
def load_model():
    base_url = "https://github.com/ljnmuyrong/Final-Examination/raw/main/"
    model_parts = [f"{base_url}bestmodel.hdf5.h5.part{i:02d}" for i in range(1, 35)]

    model_bytes = b''
    for part_url in model_parts:
        response = requests.get(part_url)
        model_bytes += response.content

    with h5py.File(BytesIO(model_bytes), 'r') as hf:
        model = tf.keras.models.load_model(hf)

    return model

def predict(image, model):
    img_array = np.array(image)
    img_array = tf.image.resize(img_array, (150, 150))
    img_array = tf.expand_dims(img_array, 0)
    img_array = img_array / 255.0

    predictions = model.predict(img_array)
    predicted_class = class_mapping[np.argmax(predictions[0])]
    return predicted_class

st.title('Imagee Classification')
uploaded_file = st.file_uploader("Choose an image", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption='Uploaded Image.', use_column_width=True)
    model = load_model()

    predicted_class = predict(image, model)
    st.write(f"Prediction: {predicted_class}")